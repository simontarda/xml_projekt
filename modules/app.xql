xquery version "3.1";

module namespace app="http://myapp/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://myapp/config" at "config.xqm";
import module namespace xslfo="http://exist-db.org/xquery/xslfo";

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute: data-template="app:test" or class="app:test" (deprecated). 
 : The function has to take 2 default parameters. Additional parameters are automatically mapped to
 : any matching request or function parameter.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)

declare function app:helloworld($node as node(), $model as map(*), $name as xs:string?) {
    if ($name) then
        <p>Hello {$name}!</p>
    else
        ()
};


declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

declare function app:sortWoj($node as node(), $model as map(*), $name as xs:string?)
{
 let $woj := (doc("dane.xml")//JED_ADM[@TYP=$name])
            return
               for $x in $woj   
               return <tr>
                        <td><a href="./edit2.xhtml">Edycja</a></td>
                        <td>{data($x/@TYP)}</td>
                        <td>{data($x/NAZWA)}</td>
                        <td>{data($x/LUDNOSC)}</td>
                        <td>{data($x/WYSOKOSC_MIN)}</td>
                        <td>{data($x/WYSOKOSC_MAX)}</td>
                      </tr>
           
};

declare function app:sortJednostka($node as node(), $model as map(*), $name2 as xs:string?)
{
 let $woj := (doc("dane.xml")//JED_ADM[NAZWA=$name2]/JED_ADM)
            return 
            
               for $x in $woj   
               return <tr>
                        <td><a href="./edit2.xhtml">Edycja</a></td>
                        <td>{data($x/@TYP)}</td>
                        <td>{data($x/NAZWA)}</td>
                        <td>{data($x/LUDNOSC)}</td>
                        <td>{data($x/WYSOKOSC_MIN)}</td>
                        <td>{data($x/WYSOKOSC_MAX)}</td>
                      </tr>
            
           
};



declare function app:show3Graph($node as node(), $model as map(*), $amount as xs:double?)
{
 let $woj := (doc("dane.xml")//JED_ADM[LUDNOSC > $amount])
            return 
            
               for $x in $woj   
               return <tr>
                        <td><a href="./edit2.xhtml">Edycja</a></td>
                        <td>{data($x/@TYP)}</td>
                        <td>{data($x/NAZWA)}</td>
                        <td>{data($x/LUDNOSC)}</td>
                        <td>{data($x/WYSOKOSC_MIN)}</td>
                        <td>{data($x/WYSOKOSC_MAX)}</td>
                      </tr>
            
           
};


declare function app:showGraph($node as node(), $model as map(*), $amount as xs:double?)
{
   
 let $woj := (doc("dane.xml")//JED_ADM[LUDNOSC > $amount])
            return  
                for $x in $woj   
               return  <g class="bar">
    <rect width="40" height="19">{data($x/LUDNOSC)}</rect>
    <text x="45" y="9.5" dy=".35em">{data($x/LUDNOSC)}</text>
  </g>


        
      
};


declare function app:showTESTGraph($node as node(), $model as map(*), $amount as xs:double?)
{
   
let $max-graph-height := 400 (: pixels :)
let $graph-bar-with := 120 (: pixels :)
let $graph-bar-spacing := 10 (: pixels :)
let $graph-text-below := 20 (: pixels :)

let $jednostki := doc("dane.xml")//JED_ADM[LUDNOSC > $amount]
let $max-ludnosc := max($jednostki/LUDNOSC)

return
    <svg xmlns="http://www.w3.org/2000/svg" 
        xmlns:xlink="http://www.w3.org/1999/xlink" 
        id="graph"
        height="{ $max-graph-height + ($graph-text-below * 2) }" 
        width="{ ($graph-bar-with + $graph-bar-spacing) * count($jednostki) }">

        <linearGradient x1="0%" x2="0%" y1="10%" y2="100%" id="gradient">
            <stop style="stop-color:#0000FF" offset="0"></stop>
            <stop style="stop-color:#FFFFFF" offset="1"></stop>
        </linearGradient>

        {
        for $jednostka at $i in $jednostki
        let $height := (xs:float($jednostka/*:LUDNOSC) div $max-ludnosc) * $max-graph-height
        let $x := ($i - 1) * ($graph-bar-with + $graph-bar-spacing)
        let $y := $max-graph-height - $height
        return
            (
            <rect width="{$graph-bar-with}" 
                height="{$height}" x="{$x}" y="{$y}" 
                fill="url(#gradient)">TEST</rect>,
                <text x="{$x}" 
                y="{$max-graph-height + $graph-text-below}" 
                fill="black">{$jednostka/*:NAZWA/text()}</text>
            )
        }
    </svg>
};



declare function app:ABC($node as node(), $model as map(*), $num as xs:double?)
{
   

let $jednostki := doc("dane.xml")//JED_ADM[LUDNOSC > $num]
let $max-ludnosc := max($jednostki/LUDNOSC)

return
  <html xmlns="http://www.w3.org/1999/xhtml" xmlns:xf="http://www.w3.org/2002/xforms">
 <head>
 <title>Notowania XForms</title>
     <xf:model>
         <xf:instance resource="modules/dane.xml"/>
         <xf:submission id="n_update" resource="modules/dane.xml" replace="none" method="put"/>
     </xf:model>
 </head>
 <body>
 <p>
 <xf:repeat id="jednostki" nodeset="//JED_ADM" appearance="compact" class="contactsRepeat">
 <xf:input ref="NAZWA">
     <xf:label>Data:</xf:label>
     <xf:hint>Podaj nowa nazwe</xf:hint>
 </xf:input>
<xf:select ref="@TYP" selection="closed" appearance="full" >  
            <xf:item>
                <xf:label>Województwo</xf:label>
                <xf:value>Województwo</xf:value> 
            </xf:item>
            <xf:item>
                <xf:label>Powiat</xf:label>
                <xf:value>Powiat</xf:value>
            </xf:item>
            <xf:item>
                <xf:label>Gmina</xf:label>
                <xf:value>Gmina</xf:value>
            </xf:item>
</xf:select>
 <xf:input ref="LUDNOSC">
     <xf:label>LUDNOSC:</xf:label>
     <xf:hint>Podaj liczbe ludnosci</xf:hint>
 </xf:input>
 <xf:input ref="WYSOKOSC_MIN">
     <xf:label>WYSOKOSC_MIN:</xf:label>
     <xf:hint>Podaj WYSOKOSC_MIN</xf:hint>
 </xf:input>
 <xf:input ref="WYSOKOSC_MAX">
     <xf:label>WYSOKOSC_MAX:</xf:label>
     <xf:hint>Podaj WYSOKOSC_MAX:</xf:hint>
 </xf:input>
 </xf:repeat>
 </p>
 <xf:submit submission="n_update">
 <xf:label>Zatwierdz</xf:label>
 </xf:submit>
 </body>
</html>
};














